name: Deploy

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up workspace paths
        id: paths
        run: |
          echo "APPS_DIR=$HOME/apps" >> $GITHUB_ENV
          echo "BACKEND_DIR=$HOME/apps/soobo-mbti-backend" >> $GITHUB_ENV
          echo "FRONTEND_DIR=$HOME/apps/soobo-mbti-frontend" >> $GITHUB_ENV

      - name: Prepare directories
        run: |
          mkdir -p "$APPS_DIR" "$BACKEND_DIR" "$FRONTEND_DIR"

      - name: Provision local MongoDB (if no secret or USE_LOCAL_MONGO=true)
        env:
          MONGO_URI_SECRET: ${{ secrets.MONGODB_URI }}
          USE_LOCAL_MONGO: ${{ vars.USE_LOCAL_MONGO }}
          LOCAL_MONGO_PORT: ${{ vars.LOCAL_MONGO_PORT }}
        run: |
          if [ "${USE_LOCAL_MONGO}" = "true" ] || [ -z "$MONGO_URI_SECRET" ]; then
            echo "No MONGODB_URI secret. Ensuring local MongoDB via Docker..."
            # pick docker command (sudo fallback)
            if docker info >/dev/null 2>&1; then DOCKER="docker";
            elif sudo -n docker info >/dev/null 2>&1; then DOCKER="sudo docker";
            else echo "Docker not accessible" >&2; exit 1; fi

            mkdir -p "$APPS_DIR/soobo-mongo"

            # choose an available host port (27017 -> 27018 -> 27019)
            pick_port() {
              if [ -n "${LOCAL_MONGO_PORT}" ]; then
                echo ${LOCAL_MONGO_PORT}
                return 0
              fi
              for p in 27017 27018 27019; do
                if ! (echo > /dev/tcp/127.0.0.1/$p) >/dev/null 2>&1; then
                  echo $p; return 0;
                fi
              done
              return 1
            }
            HOST_MONGO_PORT=$(pick_port) || { echo "No free port for MongoDB" >&2; exit 1; }
            echo "Using host MongoDB port: $HOST_MONGO_PORT"

            if $DOCKER ps -a --format '{{.Names}}' | grep -q '^soobo-mongo$'; then
              $DOCKER rm -f soobo-mongo || true
            fi
            $DOCKER run -d --name soobo-mongo \
              -p 127.0.0.1:${HOST_MONGO_PORT}:27017 \
              -v "$APPS_DIR/soobo-mongo:/data/db" \
              --restart unless-stopped \
              mongo:6 --bind_ip 127.0.0.1

            for i in {1..60}; do
              (echo > /dev/tcp/127.0.0.1/${HOST_MONGO_PORT}) >/dev/null 2>&1 && break
              echo "Waiting for MongoDB on ${HOST_MONGO_PORT}... ($i)"; sleep 1
            done
            echo "MONGODB_URI_EFFECTIVE=mongodb://127.0.0.1:${HOST_MONGO_PORT}/soobo" >> $GITHUB_ENV
          else
            echo "Using provided MONGODB_URI secret"
            echo "::add-mask::$MONGO_URI_SECRET"
            echo "MONGODB_URI_EFFECTIVE=$MONGO_URI_SECRET" >> $GITHUB_ENV
          fi

      - name: Install backend deps
        working-directory: backend
        run: |
          npm ci

      - name: Build backend (if any)
        working-directory: backend
        run: |
          if [ -f package.json ] && node -e "p=require('./package.json');process.exit(p.scripts&&p.scripts.build?0:1)" ; then
            npm run build
          else
            echo "No backend build script. Skipping."
          fi

      - name: Deploy backend to $BACKEND_DIR
        run: |
          rsync -a --delete backend/ "$BACKEND_DIR/"

      - name: Write backend .env from secrets
        run: |
          BACKEND_ENV_FILE="$BACKEND_DIR/.env"
          : "${PORT:=4000}"
          CORS_ORIGINS_VALUE="${{ secrets.CORS_ORIGINS }}"
          if [ -z "$CORS_ORIGINS_VALUE" ]; then CORS_ORIGINS_VALUE="https://soobo.sijun.dev"; fi
          cat > "$BACKEND_ENV_FILE" <<EOF
          NODE_ENV=production
          PORT=$PORT
          MONGODB_URI=${MONGODB_URI_EFFECTIVE}
          CORS_ORIGINS=$CORS_ORIGINS_VALUE
          EOF

      - name: Install production deps in backend
        run: |
          cd "$BACKEND_DIR"
          npm ci --omit=dev

      - name: Restart backend app with PM2 (user-level)
        env:
          APP_NAME: soobo-backend
        run: |
          if ! command -v pm2 >/dev/null 2>&1; then
            npm i -g pm2
          fi
          # Ensure using the correct Node interpreter
          NODE_PATH="$(which node)"
          echo "Using node: $NODE_PATH"
          # Always restart cleanly to avoid stale processes/env
          pm2 delete "$APP_NAME" || true
          pm2 start src/server.js --name "$APP_NAME" --cwd "$BACKEND_DIR" --interpreter "$NODE_PATH" --time
          pm2 save

      - name: Health check backend
        run: |
          echo "PM2 processes:" && pm2 ls || true
          echo "Backend logs (tail):" && pm2 logs soobo-backend --lines 60 || true
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:4000/api/health >/dev/null 2>&1; then
              echo "Backend healthy"
              exit 0
            fi
            echo "Waiting for backend... ($i)"
            sleep 2
          done
          echo "Backend failed to become healthy"
          pm2 logs --lines 200 || true
          exit 1

      - name: Build frontend assets
        working-directory: soobo-mbti
        run: |
          # 정적 파일 프로젝트면 빌드 없이 복사만 수행
          if [ -f package.json ]; then
            npm ci
            if node -e "p=require('./package.json');process.exit(p.scripts&&p.scripts.build?0:1)" ; then
              npm run build
              echo "FRONT_BUILD_DIST=dist" >> $GITHUB_ENV
            else
              echo "FRONT_BUILD_DIST=." >> $GITHUB_ENV
            fi
          else
            echo "FRONT_BUILD_DIST=." >> $GITHUB_ENV
          fi

      - name: Deploy frontend to $FRONTEND_DIR
        run: |
          SRC_DIR="soobo-mbti/${FRONT_BUILD_DIST:-.}"
          rsync -a --delete "$SRC_DIR/" "$FRONTEND_DIR/"

      - name: Serve frontend with PM2 (user-level)
        env:
          FRONT_APP: soobo-frontend
        run: |
          if ! command -v pm2 >/dev/null 2>&1; then
            npm i -g pm2
          fi
          # pm2 serve keeps process alive beyond workflow lifetime
          if pm2 describe "$FRONT_APP" >/dev/null 2>&1; then
            pm2 delete "$FRONT_APP" || true
          fi
          pm2 serve "$FRONTEND_DIR" 8080 --name "$FRONT_APP"
          pm2 save

