# 안전한 배포 워크플로우
name: Deploy Soobo MBTI (Safe)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Frontend & Backend
    runs-on: [self-hosted]

    steps:
      # 1. 레포지토리 코드 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. 프론트엔드 배포 (기존 유지)
      - name: Deploy Frontend Files
        run: |
          # 프론트엔드 파일들을 Nginx 웹 루트로 동기화
          sudo rsync -av --delete ./soobo-mbti/ /home/runner/apps/soobo-mbti-frontend/

      # 3. 백엔드 배포 준비 (권한 확인 후 실행)
      - name: Prepare Backend Deployment
        run: |
            # 백엔드 디렉토리 생성 (권한 확인)
            if [ ! -d "/home/runner/apps/soobo-mbti-backend" ]; then
              mkdir -p /home/runner/apps/soobo-mbti-backend || sudo mkdir -p /home/runner/apps/soobo-mbti-backend
            fi
            
            # 기존 파일들 정리
            rm -rf /home/runner/apps/soobo-mbti-backend/* 2>/dev/null || \
            sudo rm -rf /home/runner/apps/soobo-mbti-backend/* 2>/dev/null || true
            
            # 백엔드 디렉토리 자체를 복사 (Docker 빌드 컨텍스트 유지)
            cp -r ./backend /home/runner/apps/soobo-mbti-backend/ 2>/dev/null || \
            sudo cp -r ./backend /home/runner/apps/soobo-mbti-backend/
            
            # Docker Compose와 MongoDB 초기화 스크립트 복사
            cp ./docker-compose.yml /home/runner/apps/soobo-mbti-backend/ 2>/dev/null || \
            sudo cp ./docker-compose.yml /home/runner/apps/soobo-mbti-backend/
            
            cp -r ./mongo-init /home/runner/apps/soobo-mbti-backend/ 2>/dev/null || \
            sudo cp -r ./mongo-init /home/runner/apps/soobo-mbti-backend/

      # 4. 환경 변수 설정
      - name: Setup Environment Variables
        run: |
          cd /home/runner/apps/soobo-mbti-backend
          
          # 백엔드 디렉토리 내에 .env 파일 생성
          cat > backend/.env <<EOF
          MONGODB_URI=mongodb://soobo_user:${{ secrets.MONGODB_PASSWORD }}@localhost:27017/soobo-mbti?authSource=soobo-mbti
          MONGODB_USER=soobo_user
          MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}
          PORT=4000
          NODE_ENV=production
          ALLOWED_ORIGINS=https://soobo.sijun.dev
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100
          EOF
          
          echo "🔧 생성된 환경 변수 확인:"
          echo "MongoDB URI: mongodb://localhost:27017/soobo-mbti"
          echo "Port: 4000"
          
          # docker-compose용 환경 변수 (루트에 생성)
          cat > .env.docker <<EOF
          MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}
          MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
          EOF

      # 5. Docker 사용자 그룹 확인 및 배포
      - name: Deploy Backend with Docker
        run: |
          cd /home/runner/apps/soobo-mbti-backend
          
          # Docker 그룹 확인
          if groups $USER | grep -q '\bdocker\b'; then
            echo "✅ User is in docker group"
            DOCKER_CMD="docker"
          else
            echo "⚠️ User not in docker group, using sudo"
            DOCKER_CMD="sudo docker"
          fi
          
          # 기존 컨테이너 중지 및 제거 (orphan 컨테이너도 제거)
          $DOCKER_CMD compose --env-file .env.docker down --remove-orphans || true
          
          # 이전 이미지 정리
          $DOCKER_CMD image prune -f || true
          
          # 새 컨테이너 빌드 및 시작
          $DOCKER_CMD compose --env-file .env.docker up -d --build
          
          # 컨테이너 시작 대기 및 상태 확인
          echo "⏳ 컨테이너 시작 대기 중..."
          sleep 20
          
          echo "📊 컨테이너 상태:"
          $DOCKER_CMD compose --env-file .env.docker ps
          
          echo "📋 컨테이너 로그 (최근 50줄):"
          $DOCKER_CMD compose --env-file .env.docker logs soobo-mbti-backend --tail=50 || true
          
          echo "🔍 컨테이너 세부 정보:"
          $DOCKER_CMD inspect soobo-mbti --format='{{.State.Status}} - {{.State.Error}}' || true

      # 6. 배포 상태 확인
      - name: Health Check
        run: |
          echo "🔍 서버 헬스 체크 시작..."
          
          # 서버가 정상적으로 시작될 때까지 대기
          for i in {1..60}; do
            if curl -f http://localhost:4000/health > /dev/null 2>&1; then
              echo "✅ Backend server is healthy!"
              break
            fi
            echo "⏳ Waiting for server... ($i/60)"
            sleep 3
          done
          
          # 최종 상태 확인
          echo "📊 최종 헬스 체크 결과:"
          curl -s http://localhost:4000/health || echo "❌ Health check failed"
          
          # API 기본 정보 확인
          echo "📋 API 정보:"
          curl -s http://localhost:4000/ || echo "❌ API info failed"

      # 7. 배포 완료 알림
      - name: Deployment Complete
        run: |
          echo "🎉 배포가 완료되었습니다!"
          echo "🌐 Frontend: https://soobo.sijun.dev"
          echo "🔗 API: https://soobo.sijun.dev/api"
          echo "❤️ Health: https://soobo.sijun.dev/api/health"
